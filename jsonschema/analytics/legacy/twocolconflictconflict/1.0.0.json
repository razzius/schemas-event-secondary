{
  "title": "analytics/legacy/twocolconflictconflict",
  "description": "Logs edit conflicts where Extension:TwoColConflict is enabled",
  "$id": "/analytics/legacy/twocolconflictconflict/1.0.0",
  "$schema": "https://json-schema.org/draft-07/schema#",
  "type": "object",
  "examples": [
    {
      "event": {
        "twoColConflictShown": true,
        "editCount": 0,
        "pageNs": 1,
        "baseRevisionId": 100,
        "latestRevisionId": 200,
        "textUser": "TestUser",
        "isAnon": false,
        "conflictChunks": 2,
        "conflictChars": 1000,
        "startTime": "20200402191000",
        "editTime": "20200402190000",
        "pageTitle": "Test Page",
        "hasJavascript": true
      },
      "meta": {
        "dt": "2020-04-02T19:11:20.942Z",
        "id": "b0caf18d-6c7f-4403-947d-2712bbe28610",
        "stream": "eventlogging_TwoColConflictConflict"
      },
      "dt": "2020-04-02T19:11:20.942Z",
      "client_dt": "2020-04-02T19:11:20.942Z",
      "$schema": "/analytics/legacy/twocolconflictconflict/1.0.0",
      "schema": "TwoColConflictConflict"
    }
  ],
  "required": [
    "$schema",
    "event",
    "meta"
  ],
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "description": "A URI identifying the JSONSchema for this event. This should match an schema's $id in a schema repository. E.g. /schema/title/1.0.0\n",
      "type": "string"
    },
    "meta": {
      "type": "object",
      "required": [
        "dt",
        "stream"
      ],
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri-reference",
          "maxLength": 8192,
          "description": "Unique URI identifying the event or entity"
        },
        "request_id": {
          "description": "Unique ID of the request that caused the event",
          "type": "string"
        },
        "id": {
          "description": "Unique ID of this event",
          "type": "string"
        },
        "dt": {
          "type": "string",
          "format": "date-time",
          "maxLength": 128,
          "description": "UTC event datetime, in ISO-8601 format"
        },
        "domain": {
          "description": "Domain the event or entity pertains to",
          "type": "string",
          "minLength": 1
        },
        "stream": {
          "description": "Name of the stream/queue/dataset that this event belongs in",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "http": {
      "type": "object",
      "properties": {
        "protocol": {
          "description": "The protocol used for the request (HTTP or HTTPS)",
          "type": "string"
        },
        "method": {
          "description": "The HTTP request method (GET, POST, etc.)",
          "type": "string"
        },
        "status_code": {
          "description": "The HTTP status code returned for this request (when known)",
          "type": "integer",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        },
        "has_cookies": {
          "description": "True if the http request has any cookies set",
          "type": "boolean"
        },
        "request_headers": {
          "description": "Request headers sent by the client.  E.g. user-agent, etc.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "response_headers": {
          "description": "Response headers sent back to the client (when known).",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "client_dt": {
      "type": "string",
      "format": "date-time",
      "maxLength": 128,
      "description": "ISO-8601 formatted timestamp of when the event occurred/was generated in UTC). This exists separately from meta.dt in the main common schema. For external client-sent instrumentation events, we want to allow meta.dt to be the received time (filled in by EventGate at ingest time), as we don't trust client-sent events to always set the proper date and time. Client-set event generation time should be set here instead. See: https://phabricator.wikimedia.org/T240460\n"
    },
    "wiki": {
      "description": "$wgDBName e.g. enwiki",
      "type": "string"
    },
    "webHost": {
      "description": "Request host. 'window.location.hostname' on client-side events; $_SERVER['HTTP_HOST'] on server.",
      "type": "string"
    },
    "schema": {
      "description": "Title of event schema.  Deprecated.",
      "type": "string"
    },
    "revision": {
      "description": "Revision ID of event schema.  Deprecated.",
      "type": "integer",
      "minimum": -9007199254740991,
      "maximum": 9007199254740991
    },
    "topic": {
      "description": "The queue topic name this event belongs in.  Deprecated.",
      "type": "string"
    },
    "recvFrom": {
      "description": "Hostname of server emitting the log line.  Deprecated.",
      "type": "string"
    },
    "dt": {
      "description": "UTC ISO-8601 timestamp of event.  Deprecated, use meta.dt.",
      "type": "string",
      "format": "date-time",
      "maxLength": 128
    },
    "seqId": {
      "description": "Udp2log sequence ID.  Deprecated.",
      "type": "integer",
      "minimum": -9007199254740991,
      "maximum": 9007199254740991
    },
    "uuid": {
      "description": "Unique event identifier.  Deprecated, use meta.id.",
      "type": "string",
      "maxLength": 128
    },
    "ip": {
      "description": "Client IP address that sent this event, usually best guess parsed out of from X-Client-IP header which is set by varnish from X-Forwarded-For. Deprecated, use http.client_ip.\n",
      "type": "string"
    },
    "event": {
      "type": "object",
      "required": [
        "twoColConflictShown",
        "isAnon",
        "editCount",
        "pageNs",
        "baseRevisionId",
        "latestRevisionId",
        "conflictChunks",
        "conflictChars",
        "startTime",
        "editTime",
        "pageTitle",
        "hasJavascript"
      ],
      "properties": {
        "summary": {
          "description": "Edit summary. (deprecated)",
          "type": "string"
        },
        "twoColConflictShown": {
          "description": "Indicates whether a TwoColConflict resolution page was shown (opposed to the regular edit conflict page).",
          "type": "boolean"
        },
        "editCount": {
          "description": "Indicates the edit count of the user causing the conflict. 0 for anon users.",
          "type": "integer",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        },
        "pageNs": {
          "description": "Indicates the namespace ID the conflcit occoured in.",
          "type": "integer",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        },
        "baseRevisionId": {
          "description": "Indicates the baseRevisionId for the conflict, taken from EditPage.",
          "type": "integer",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        },
        "latestRevisionId": {
          "description": "Indicates the id of the latest revision of the article at the time of the conflict.",
          "type": "integer",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        },
        "textUser": {
          "description": "Indicates the text that was entered causing the conflict. (deprecated)",
          "type": "string"
        },
        "isAnon": {
          "description": "Indicates whether the conflict was caused by an anon user.",
          "type": "boolean"
        },
        "conflictChunks": {
          "description": "The number of overlapping edit chunks which diff3 cannot resolve automatically.",
          "type": "integer",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        },
        "conflictChars": {
          "description": "Rough count of the number of characters in the \"other\" side of the conflict, which could not be resolved automatically.  Note that conflict workflows will show additional chunks, where there was any difference between the other and your edit.",
          "type": "integer",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        },
        "startTime": {
          "description": "Timestamp when the editor was first launched.",
          "type": "string"
        },
        "editTime": {
          "description": "Timestamp of the base revision, corresponding to baseRevisionId.",
          "type": "string"
        },
        "pageTitle": {
          "description": "Article title, without the namespace.",
          "type": "string"
        },
        "hasJavascript": {
          "description": "Indicates whether Javascript was enabled.",
          "type": "boolean"
        }
      }
    }
  }
}