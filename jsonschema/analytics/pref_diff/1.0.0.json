{
  "title": "analytics/pref_diff",
  "description": "Represents a user preference change that initiated from a user submitting the user preferences form. This is slightly different from the prefupdate schema in that it logs an arbitrary `intial` and `final` state (e.g. a user switched from latest Vector to Monobook). It also allows for the use of a hashed user ID. Please see T261842 for more info on its initial use case.",
  "$id": "/analytics/pref_diff/1.0.0",
  "$schema": "https://json-schema.org/draft-07/schema#",
  "type": "object",
  "examples": [
    {
      "$schema": "/analytics/pref_diff/1.0.0",
      "meta": {
        "stream": "mediawiki.pref_diff",
        "dt": "2020-04-02T19:11:20.942Z"
      },
      "user_hash": "c4ca4238a0b923820dcc509a6f75849b",
      "initial_state": "minerva",
      "final_state": "vector2",
      "bucketed_user_edit_count": "5-99 edits"
    }
  ],
  "required": [
    "$schema",
    "bucketed_user_edit_count",
    "final_state",
    "initial_state",
    "meta",
    "user_hash"
  ],
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "description": "A URI identifying the JSONSchema for this event. This should match an schema's $id in a schema repository. E.g. /schema/title/1.0.0\n",
      "type": "string"
    },
    "meta": {
      "type": "object",
      "required": [
        "dt",
        "stream"
      ],
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri-reference",
          "maxLength": 8192,
          "description": "Unique URI identifying the event or entity"
        },
        "request_id": {
          "description": "Unique ID of the request that caused the event",
          "type": "string"
        },
        "id": {
          "description": "Unique ID of this event",
          "type": "string"
        },
        "dt": {
          "type": "string",
          "format": "date-time",
          "maxLength": 128,
          "description": "UTC event datetime, in ISO-8601 format"
        },
        "domain": {
          "description": "Domain the event or entity pertains to",
          "type": "string",
          "minLength": 1
        },
        "stream": {
          "description": "Name of the stream/queue/dataset that this event belongs in",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "http": {
      "type": "object",
      "properties": {
        "protocol": {
          "description": "The protocol used for the request (HTTP or HTTPS)",
          "type": "string"
        },
        "method": {
          "description": "The HTTP request method (GET, POST, etc.)",
          "type": "string"
        },
        "status_code": {
          "description": "The HTTP status code returned for this request (when known)",
          "type": "integer",
          "minimum": -9007199254740991,
          "maximum": 9007199254740991
        },
        "has_cookies": {
          "description": "True if the http request has any cookies set",
          "type": "boolean"
        },
        "request_headers": {
          "description": "Request headers sent by the client.  E.g. user-agent, etc.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "response_headers": {
          "description": "Response headers sent back to the client (when known).",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "dt": {
      "type": "string",
      "format": "date-time",
      "maxLength": 128,
      "description": "ISO-8601 formatted timestamp of when the event occurred/was generated in UTC). This exists separately from meta.dt in the main common schema. For external client-sent instrumentation events, we want to allow meta.dt to be the received time (filled in by EventGate at ingest time), as we don't trust client-sent events to always set the proper date and time. Client-set event generation time should be set here instead. See: https://phabricator.wikimedia.org/T240460\n"
    },
    "user_hash": {
      "type": "string",
      "description": "String is used to allow for the use of a hashed user id."
    },
    "initial_state": {
      "type": "string",
      "description": "Identifies the state of relevant form field(s) before being changed by the user."
    },
    "final_state": {
      "type": "string",
      "description": "Identifies the state of relevant form field(s) after being changed by user."
    },
    "bucketed_user_edit_count": {
      "type": "string",
      "enum": [
        "Unknown",
        "1000+ edits",
        "100-999 edits",
        "5-99 edits",
        "1-4 edits",
        "0 edits"
      ],
      "description": "The user's edit count placed into one of five buckets. \"Unknown\" represents the user's edit count not being available."
    }
  }
}