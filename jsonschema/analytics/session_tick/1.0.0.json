{
  "title": "analytics/session_tick",
  "description": "Ticks sent at a pre-specified interval during an active client session. Used to compute a privacy-conscious session length metric. See: https://wikitech.wikimedia.org/wiki/Analytics/Data_Lake/Traffic/SessionLength\n",
  "$id": "/analytics/session_tick/1.0.0",
  "$schema": "https://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": [
    "$schema",
    "meta",
    "tick",
    "tick_interval_ms"
  ],
  "examples": [
    {
      "$schema": "/analytics/session_tick/1.0.0",
      "meta": {
        "stream": "session_tick_example",
        "domain": "es.m.wikipedia.org",
        "dt": "2020-06-11T19:20:00.649Z"
      },
      "tick": 2,
      "tick_interval_ms": 10000,
      "client_dt": "2020-06-11T19:20:00.649Z"
    },
    {
      "$schema": "/analytics/session_tick/1.0.0",
      "meta": {
        "stream": "session_tick_example",
        "domain": "es.m.wikipedia.org",
        "dt": "2020-06-11T19:20:10.649Z"
      },
      "tick": 3,
      "tick_interval_ms": 10000,
      "client_dt": "2020-06-11T19:20:10.649Z"
    }
  ],
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "type": "string",
      "description": "A URI identifying the JSONSchema for this event. This should match an schema's $id in a schema repository. E.g. /schema/title/1.0.0\n"
    },
    "meta": {
      "type": "object",
      "required": [
        "dt",
        "stream"
      ],
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri-reference",
          "maxLength": 8192,
          "description": "Unique URI identifying the event or entity"
        },
        "request_id": {
          "type": "string",
          "description": "Unique ID of the request that caused the event"
        },
        "id": {
          "type": "string",
          "description": "Unique ID of this event"
        },
        "dt": {
          "type": "string",
          "format": "date-time",
          "maxLength": 128,
          "description": "UTC event datetime, in ISO-8601 format"
        },
        "domain": {
          "type": "string",
          "description": "Domain the event or entity pertains to",
          "minLength": 1
        },
        "stream": {
          "type": "string",
          "description": "Name of the stream/queue/dataset that this event belongs in",
          "minLength": 1
        }
      }
    },
    "http": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "description": "The HTTP request method (GET, POST, etc.)"
        },
        "status_code": {
          "type": "integer",
          "description": "The HTTP status code returned for this request (when known)"
        },
        "client_ip": {
          "type": "string",
          "description": "The http client's IP address"
        },
        "has_cookies": {
          "type": "boolean",
          "description": "True if the http request has any cookies set"
        },
        "request_headers": {
          "type": "object",
          "description": "Request headers sent by the client.  E.g. user-agent, etc.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "response_headers": {
          "type": "object",
          "description": "Response headers sent back to the client (when known).",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "client_dt": {
      "type": "string",
      "format": "date-time",
      "maxLength": 128,
      "description": "ISO-8601 formatted timestamp of when the event occurred/was generated in UTC). This exists separately from meta.dt in the main common schema. For external client-sent instrumentation events, we want to allow meta.dt to be the received time (filled in by EventGate at ingest time), as we don't trust client-sent events to always set the proper date and time. Client-set event generation time should be set here instead. See: https://phabricator.wikimedia.org/T240460\n"
    },
    "tick": {
      "type": "integer",
      "minimum": 0,
      "description": "the number of tick_interval_ms milliseconds that have passed since the client session has started\n"
    },
    "tick_interval_ms": {
      "type": "integer",
      "minimum": 0,
      "description": "number of milliseconds between ticks"
    }
  }
}